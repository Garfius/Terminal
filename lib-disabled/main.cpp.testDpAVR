#include <Arduino.h>
/*********************************************************************
This is an example for our Monochrome OLEDs based on SH1106 drivers

  Pick one up today in the adafruit shop!
  ------> http://www.adafruit.com/category/63_98

This example is for a 128x64 size display using SPI to communicate
4 or 5 pins are required to interface

Adafruit invests time and resources providing this open source code, 
please support Adafruit and open-source hardware by purchasing 
products from Adafruit!

Written by Limor Fried/Ladyada  for Adafruit Industries.  
BSD license, check license.txt for more information
All text above, and the splash screen must be included in any redistribution
*********************************************************************/

#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SH1106.h>

// If using software SPI (the default case):
#define OLED_MOSI   9
#define OLED_CLK   10
#define OLED_DC    11
#define OLED_CS    12
#define OLED_RESET 13
//Adafruit_SH1106 display(OLED_MOSI, OLED_CLK, OLED_DC, OLED_RESET, OLED_CS);
Adafruit_SH1106 display(7, 8, 6); //Adafruit_SH1106(int8_t DC, int8_t RST, int8_t CS);
/* Uncomment this block to use hardware SPI
#define OLED_DC     6
#define OLED_CS     7
#define OLED_RESET  8
Adafruit_SH1106 display(OLED_DC, OLED_RESET, OLED_CS);
*/

#define NUMFLAKES 10
#define XPOS 0
#define YPOS 1
#define DELTAY 2

#define LOGO16_GLCD_HEIGHT 16 
#define LOGO16_GLCD_WIDTH  16 
static const unsigned char PROGMEM logo16_glcd_bmp[] =
{ B00000000, B11000000,
  B00000001, B11000000,
  B00000001, B11000000,
  B00000011, B11100000,
  B11110011, B11100000,
  B11111110, B11111000,
  B01111110, B11111111,
  B00110011, B10011111,
  B00011111, B11111100,
  B00001101, B01110000,
  B00011011, B10100000,
  B00111111, B11100000,
  B00111111, B11110000,
  B01111100, B11110000,
  B01110000, B01110000,
  B00000000, B00110000 };

#if (SH1106_LCDHEIGHT != 64)
#error("Height incorrect, please fix Adafruit_SH1106.h!");
#endif
unsigned long tm, demoTime = 14000;
void testdrawbitmap(const uint8_t *bitmap, uint8_t w, uint8_t h) {
  
  uint8_t icons[NUMFLAKES][3];
 
  // initialize
  for (uint8_t f=0; f< NUMFLAKES; f++) {
    icons[f][XPOS] = random(display.width());
    icons[f][YPOS] = 0;
    icons[f][DELTAY] = random(5) + 1;
    
    Serial.print("x: ");
    Serial.print(icons[f][XPOS], DEC);
    Serial.print(" y: ");
    Serial.print(icons[f][YPOS], DEC);
    Serial.print(" dy: ");
    Serial.println(icons[f][DELTAY], DEC);
  }

  tm = millis();
  while (millis() - tm < demoTime) {
    // draw each icon
    for (uint8_t f=0; f< NUMFLAKES; f++) {
      display.drawBitmap(icons[f][XPOS], icons[f][YPOS], logo16_glcd_bmp, w, h, WHITE);
    }
    display.display();
    delay(10);
    
    // then erase it + move it
    for (uint8_t f=0; f< NUMFLAKES; f++) {
      display.drawBitmap(icons[f][XPOS], icons[f][YPOS],  logo16_glcd_bmp, w, h, BLACK);
      // move it
      icons[f][YPOS] += icons[f][DELTAY];
      // if its gone, reinit
      if (icons[f][YPOS] > display.height()) {
	icons[f][XPOS] = random(display.width());
	icons[f][YPOS] = 0;
	icons[f][DELTAY] = random(5) + 1;
      }
    }
   }
}


void testdrawchar(void) {
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(0,0);

  for (uint8_t i=0; i < 168; i++) {
    if (i == '\n') continue;
    display.write(i);
    if ((i > 0) && (i % 21 == 0))
      display.println();
  }    
  display.display();
}

void testdrawcircle(void) {
  for (int16_t i=0; i<display.height(); i+=2) {
    display.drawCircle(display.width()/2, display.height()/2, i, WHITE);
    display.display();
  }
}

void testfillrect(void) {
  uint8_t color = 1;
  for (int16_t i=0; i<display.height()/2; i+=3) {
    // alternate colors
    display.fillRect(i, i, display.width()-i*2, display.height()-i*2, color%2);
    display.display();
    color++;
  }
}

void testdrawtriangle(void) {
  for (int16_t i=0; i<min(display.width(),display.height())/2; i+=5) {
    display.drawTriangle(display.width()/2, display.height()/2-i,
                     display.width()/2-i, display.height()/2+i,
                     display.width()/2+i, display.height()/2+i, WHITE);
    display.display();
  }
}

void testfilltriangle(void) {
  uint8_t color = WHITE;
  for (int16_t i=min(display.width(),display.height())/2; i>0; i-=5) {
    display.fillTriangle(display.width()/2, display.height()/2-i,
                     display.width()/2-i, display.height()/2+i,
                     display.width()/2+i, display.height()/2+i, WHITE);
    if (color == WHITE) color = BLACK;
    else color = WHITE;
    display.display();
  }
}

void testdrawroundrect(void) {
  for (int16_t i=0; i<display.height()/2-2; i+=2) {
    display.drawRoundRect(i, i, display.width()-2*i, display.height()-2*i, display.height()/4, WHITE);
    display.display();
  }
}

void testfillroundrect(void) {
  uint8_t color = WHITE;
  for (int16_t i=0; i<display.height()/2-2; i+=2) {
    display.fillRoundRect(i, i, display.width()-2*i, display.height()-2*i, display.height()/4, color);
    if (color == WHITE) color = BLACK;
    else color = WHITE;
    display.display();
  }
}
   
void testdrawrect(void) {
  for (int16_t i=0; i<display.height()/2; i+=2) {
    display.drawRect(i, i, display.width()-2*i, display.height()-2*i, WHITE);
    display.display();
  }
}

void testdrawline() {  
  for (int16_t i=0; i<display.width(); i+=4) {
    display.drawLine(0, 0, i, display.height()-1, WHITE);
    display.display();
  }
  for (int16_t i=0; i<display.height(); i+=4) {
    display.drawLine(0, 0, display.width()-1, i, WHITE);
    display.display();
  }
  delay(250);
  
  display.clearDisplay();
  for (int16_t i=0; i<display.width(); i+=4) {
    display.drawLine(0, display.height()-1, i, 0, WHITE);
    display.display();
  }
  for (int16_t i=display.height()-1; i>=0; i-=4) {
    display.drawLine(0, display.height()-1, display.width()-1, i, WHITE);
    display.display();
  }
  delay(250);
  
  display.clearDisplay();
  for (int16_t i=display.width()-1; i>=0; i-=4) {
    display.drawLine(display.width()-1, display.height()-1, i, 0, WHITE);
    display.display();
  }
  for (int16_t i=display.height()-1; i>=0; i-=4) {
    display.drawLine(display.width()-1, display.height()-1, 0, i, WHITE);
    display.display();
  }
  delay(250);

  display.clearDisplay();
  for (int16_t i=0; i<display.height(); i+=4) {
    display.drawLine(display.width()-1, 0, 0, i, WHITE);
    display.display();
  }
  for (int16_t i=0; i<display.width(); i+=4) {
    display.drawLine(display.width()-1, 0, i, display.height()-1, WHITE); 
    display.display();
  }
  delay(250);
}

/*
void testscrolltext(void) {
  display.setTextSize(2);
  display.setTextColor(WHITE);
  display.setCursor(10,0);
  display.clearDisplay();
  display.println("scroll");
  display.display();
 
  display.startscrollright(0x00, 0x0F);
  delay(2000);
  display.stopscroll();
  delay(1000);
  display.startscrollleft(0x00, 0x0F);
  delay(2000);
  display.stopscroll();
  delay(1000);    
  display.startscrolldiagright(0x00, 0x07);
  delay(2000);
  display.startscrolldiagleft(0x00, 0x07);
  delay(2000);
  display.stopscroll();
}
*/
byte pattern[4];

void fillRectD(uint8_t x0, uint8_t y0, uint8_t w, uint8_t h, uint8_t col)
{
    for (int y = y0; y < y0 + h; y++) { //y reads pat in MSB order
        uint8_t mask = 0x80 >> (y & 7); //(0,0) : 0xAA & 0x80. (0,1) : 0xAA & 0x40
        for (int x = x0; x < x0 + w; x++) {
            uint8_t pat = pattern[x & 3];
            if (pat & mask) display.drawPixel(x, y, col);
        }
    }
}
void cls(void)
{
    display.fillRect(0, 0, display.width(), display.height(), BLACK);
}
void drawLineHfastD(uint8_t x, uint8_t y, uint8_t w, uint8_t col)
{
    fillRectD(x, y, w, 1, col);
}

void fillCircleD(uint8_t x0, uint8_t y0, uint8_t r, uint8_t col)
{
    drawLineHfastD(x0 - r, y0, 2 * r + 1, col);
    int16_t f     = 1 - r;
    int16_t ddF_x = 1;
    int16_t ddF_y = -2 * r;
    int16_t x     = 0;
    int16_t y     = r;

    while (x < y) {
        if (f >= 0) {
            y--;
            ddF_y += 2;
            f     += ddF_y;
        }
        x++;
        ddF_x += 2;
        f     += ddF_x;
        drawLineHfastD(x0 - x, y0 + y, 2 * x + 1, col);
        drawLineHfastD(x0 - y, y0 + x, 2 * y + 1, col);
        drawLineHfastD(x0 - x, y0 - y, 2 * x + 1, col);
        drawLineHfastD(x0 - y, y0 - x, 2 * y + 1, col);
    }
}

//############################### Dither functions ###########################
static const byte ditherTab[4 * 17] PROGMEM = {
    0x00, 0x00, 0x00, 0x00, // 0

    0x88, 0x00, 0x00, 0x00, // 1
    0x88, 0x00, 0x22, 0x00, // 2
    0x88, 0x00, 0xaa, 0x00, // 3
    0xaa, 0x00, 0xaa, 0x00, // 4
    0xaa, 0x44, 0xaa, 0x00, // 5
    0xaa, 0x44, 0xaa, 0x11, // 6
    0xaa, 0x44, 0xaa, 0x55, // 7

    0xaa, 0x55, 0xaa, 0x55, // 8

    0xaa, 0xdd, 0xaa, 0x55, // 9
    0xaa, 0xdd, 0xaa, 0x77, // 10
    0xaa, 0xdd, 0xaa, 0xff, // 11
    0xaa, 0xff, 0xaa, 0xff, // 12
    0xbb, 0xff, 0xaa, 0xff, // 13
    0xbb, 0xff, 0xee, 0xff, // 14
    0xbb, 0xff, 0xff, 0xff, // 15

    0xff, 0xff, 0xff, 0xff // 16
};
float t = 0;
char banner[] = "Gerard Rulas";
void setDither(uint8_t s)
{
    if (s > 16) return;
    pattern[0] = pgm_read_byte(ditherTab + s * 4 + 0);
    pattern[1] = pgm_read_byte(ditherTab + s * 4 + 1);
    pattern[2] = pgm_read_byte(ditherTab + s * 4 + 2);
    pattern[3] = pgm_read_byte(ditherTab + s * 4 + 3);
}
void animTextCircle()
{
    cls();
    //display.setFont(c64enh);
    char *txt = banner;
    int x = 4;
    float y, y2, xr;
    float r = 10.0 + 6.0 * (1.0 + sin(t / 28.0));
    float xo = 38.0 * (0.0 + sin(t / 20.0));
    float yt = 24;
    while (*txt) {
        xr = 2 + x - 64 - xo;
        y2 = (r + 3) * (r + 3) - (xr) * (xr);
        y = yt;
        if (y2 > 0) y = 32 - sqrt(y2) - 5;
        if (y < 0) y = 0;
        if (y > yt) y = yt;
        display.setCursor(x, (int)y);
        display.print(*txt++);
        x += display.getCursorX() - x;
    }

    fillCircleD(64 + xo, 32, r, WHITE);
    //display.drawCircle(64+xo,32,r+1,WHITE);
    t += 0.4;
    display.display();
}
void animSinLines()
{
    cls();
    float x;
    for (int i = 0; i < 64; i++) {
        x = 20.0 * (2.0 + sin(t / 10.0 + i / 18.0) * sin(i / 9.0));
        drawLineHfastD(64 - x, i, x * 2, WHITE);
        x = 10.0 * (2.0 + sin(t / 8.0 + i / 15.0) * sin(i / 5.0));
        display.drawFastHLine(64 - x, i, x * 2 + 1, WHITE);
    }
    t += 0.7;
    display.display();
}
void setup()   {                
  Serial.begin(57600);
  
  // by default, we'll generate the high voltage from the 3.3v line internally! (neat!)
  display.begin(SH1106_SWITCHCAPVCC);
  // init done
  
}


void loop() {
  
  // Show image buffer on the display hardware.
  // Since the buffer is intialized with an Adafruit splashscreen
  // internally, this will display the splashscreen.
  display.display();
  delay(2000);

  // Clear the buffer.
  display.clearDisplay();
  
  display.setTextColor(WHITE,BLACK); // 'inverted' text
  setDither(8);
  tm = millis();
  while (millis() - tm < demoTime) animSinLines();// ones 
  tm = millis();
  while (millis() - tm < demoTime) animTextCircle();// vols aquest
  
  // Show the display buffer on the hardware.
  // NOTE: You _must_ call display after making any drawing commands
  // to make them visible on the display hardware!
  display.display();
  delay(2000);
  display.clearDisplay();

  // draw many lines
  testdrawline();
  display.display();
  delay(2000);
  display.clearDisplay();

  // draw rectangles
  testdrawrect();
  display.display();
  delay(2000);
  display.clearDisplay();

  // draw multiple rectangles
  testfillrect();
  display.display();
  delay(2000);
  display.clearDisplay();

  // draw mulitple circles
  testdrawcircle();
  display.display();
  delay(2000);
  display.clearDisplay();

  // draw a white circle, 10 pixel radius
  display.fillCircle(display.width()/2, display.height()/2, 10, WHITE);
  display.display();
  delay(2000);
  display.clearDisplay();

  testdrawroundrect();
  delay(2000);
  display.clearDisplay();

  testfillroundrect();
  delay(2000);
  display.clearDisplay();

  testdrawtriangle();
  delay(2000);
  display.clearDisplay();
   
  testfilltriangle();
  delay(2000);
  display.clearDisplay();

  // draw the first ~12 characters in the font
  testdrawchar();
  display.display();
  delay(2000);
  display.clearDisplay();

  // draw scrolling text
  /*testscrolltext();
  delay(2000);
  display.clearDisplay();*/
  
  // text display tests
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(0,0);
  display.println("Hello, world!");
  display.setTextColor(BLACK, WHITE); // 'inverted' text
  display.println(3.141592);
  display.setTextSize(2);
  display.setTextColor(WHITE);
  display.print("0x"); display.println(0xDEADBEEF, HEX);
  display.display();
  delay(2000);

  // miniature bitmap display
  display.clearDisplay();
  display.drawBitmap(30, 16,  logo16_glcd_bmp, 16, 16, 1);
  display.display();

  // invert the display
  display.invertDisplay(true);
  delay(1000); 
  display.invertDisplay(false);
  delay(1000); 

  // draw a bitmap icon and 'animate' movement
  testdrawbitmap(logo16_glcd_bmp, LOGO16_GLCD_HEIGHT, LOGO16_GLCD_WIDTH);
}


